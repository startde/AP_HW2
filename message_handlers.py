from aiogram.types import Message,  FSInputFile
from aiogram import Router
from aiogram.filters import CommandStart, Command
from create_profile_FSM import router_create_profile, data_manager
from log_food_FSM import router_food
from log_workout_FSM import router_workout
import matplotlib.pyplot as plt
import os
from datetime import datetime


router = Router()
router.include_router(router_create_profile)
router.include_router(router_food)
router.include_router(router_workout)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DataManager –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è


@router.message(CommandStart())
async def welcome_message(message: Message):
    await message.answer(
        text=f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n"
             "–≠—Ç–æ —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã, –∫–∞–ª–æ—Ä–∏–π –∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
             "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /set_profile"
    )

@router.message(Command("log_water"))
async def log_water(message: Message):
    try:
        amount = float(message.text.split()[1])
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        result = data_manager.log_water(user_id, amount)
        print(result)
        
        if "error" in result:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile"
            )
            return
        
        await message.answer(
            f"üíß –ó–∞–ø–∏—Å–∞–Ω–æ: {result['logged']} –º–ª –≤–æ–¥—ã\n"
            f"–í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {result['total']} –º–ª\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–æ—Ä–º—ã: {result['remaining']} –º–ª"
        )
    except IndexError:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–ª>")
    except ValueError:
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

async def create_progress_graphs(user_id: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    
    progress = data_manager.get_progress(user_id)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —Ç—Ä–µ–º—è –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 15))
    fig.suptitle('–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è', fontsize=16)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã
    water_data = [0, progress['water']['consumed']]
    water_goal = [progress['water']['goal'], progress['water']['goal']]
    times = ['00:00', datetime.now().strftime('%H:%M')]
    
    ax1.plot(times, water_data, 'b-', label='–í—ã–ø–∏—Ç–æ –≤–æ–¥—ã')
    ax1.plot(times, water_goal, 'r--', label='–¶–µ–ª—å')
    ax1.fill_between(times, water_data, alpha=0.3)
    ax1.set_title('–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã (–º–ª)')
    ax1.legend()
    ax1.grid(True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π
    calories_consumed = [0, progress['calories']['consumed']]
    calories_goal = [progress['calories']['goal'], progress['calories']['goal']]
    calories_burned = [0, progress['calories']['burned']]
    
    ax2.plot(times, calories_consumed, 'g-', label='–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ')
    ax2.plot(times, calories_goal, 'r--', label='–¶–µ–ª—å')
    ax2.plot(times, calories_burned, 'b-', label='–°–æ–∂–∂–µ–Ω–æ')
    ax2.fill_between(times, calories_consumed, alpha=0.3)
    ax2.set_title('–ö–∞–ª–æ—Ä–∏–∏ (–∫–∫–∞–ª)')
    ax2.legend()
    ax2.grid(True)
    
    # –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏
    if progress['food_log']:
        foods = [entry['food'] for entry in progress['food_log']]
        calories = [entry['calories'] for entry in progress['food_log']]
        ax3.pie(calories, labels=foods, autopct='%1.1f%%')
        ax3.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏')
    else:
        ax3.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏', 
                 horizontalalignment='center', verticalalignment='center')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.tight_layout()
    graph_path = f'user_{user_id}_progress.png'
    plt.savefig(graph_path)
    plt.close()
    
    return graph_path

@router.message(Command("check_progress"))
async def check_progress(message: Message):
    try:
        user_id = str(message.from_user.id)
        progress = data_manager.get_progress(user_id)
        
        if "error" in progress:
            if progress["error"] == "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω":
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {progress['error']}")
            return
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π
        water_percent = round((progress["water"]["consumed"] / progress["water"]["goal"]) * 100)
        calories_percent = round((progress["calories"]["consumed"] / progress["calories"]["goal"]) * 100)
        
        water_progress = "üåä –í–æ–¥–∞:\n"
        water_progress += f"‚îî –í—ã–ø–∏—Ç–æ: {progress['water']['consumed']} –º–ª –∏–∑ {progress['water']['goal']} –º–ª ({water_percent}%)\n"
        if progress["water"]["remaining"] > 0:
            water_progress += f"‚îî –û—Å—Ç–∞–ª–æ—Å—å: {progress['water']['remaining']} –º–ª\n"
        else:
            water_progress += "‚îî ‚úÖ –¶–µ–ª—å –ø–æ –≤–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n"
            
        food_log = ""
        if progress["food_log"]:
            food_log = "\nüçΩ –ü—Ä–∏–µ–º—ã –ø–∏—â–∏ —Å–µ–≥–æ–¥–Ω—è:\n"
            for entry in progress["food_log"]:
                food_log += f"‚îî {entry['food']}: {entry['amount']}–≥ ({round(entry['calories'])} –∫–∫–∞–ª)\n"
                
        workout_log = ""
        if progress["workout_log"]:
            workout_log = "\nüèÉ‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è:\n"
            for entry in progress["workout_log"]:
                workout_log += f"‚îî {entry['type'].capitalize()}: {entry['duration']} –º–∏–Ω ({entry['calories_burned']} –∫–∫–∞–ª)\n"
        
        calories_progress = "\nüî• –ö–∞–ª–æ—Ä–∏–∏:\n"
        calories_progress += f"‚îî –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {progress['calories']['consumed']} –∫–∫–∞–ª –∏–∑ {progress['calories']['goal']} –∫–∫–∞–ª ({calories_percent}%)\n"
        calories_progress += f"‚îî –°–æ–∂–∂–µ–Ω–æ: {progress['calories']['burned']} –∫–∫–∞–ª\n"
        
        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        net_calories = progress['calories']['consumed'] - progress['calories']['burned']
        remaining_calories = progress['calories']['goal'] - net_calories
        
        if remaining_calories > 0:
            calories_progress += f"‚îî –ú–æ–∂–Ω–æ –µ—â–µ: {remaining_calories} –∫–∫–∞–ª\n"
        else:
            calories_progress += "‚îî ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∫–∞–ª–æ—Ä–∏–π\n"
            
        message_text = (
            "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n" +
            water_progress + "\n" +
            calories_progress +
            food_log +
            workout_log
        )
        
        graph_path = await create_progress_graphs(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏ –≥—Ä–∞—Ñ–∏–∫–∏
        await message.answer_photo(
            FSInputFile(graph_path),
            caption=message_text
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        os.remove(graph_path)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")