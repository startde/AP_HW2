from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from create_profile_FSM import data_manager
from utils import get_food_info

router_food = Router()

class FoodLog(StatesGroup):
    waiting_for_amount = State()

@router_food.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer(
                "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /log_food apple"
            )
            return

        food_name = ' '.join(parts[1:]).lower()
        user_id = str(message.from_user.id)

        if user_id not in data_manager.users:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ —á–µ—Ä–µ–∑ API
        food_info = await get_food_info(food_name)
        
        if not food_info:
            await message.answer(
                "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ"
            )
            return

        await state.update_data(food_name=food_name)
        
        await state.set_state(FoodLog.waiting_for_amount)
        
        await message.answer(
            f"üç¥ {food_info.product_name}\n"
            f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {round(food_info.calories)} –∫–∫–∞–ª –Ω–∞ 100 –≥\n"
            f"–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–º–º:"
        )
        
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>"
        )

@router_food.message(FoodLog.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        
        if amount <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        data = await state.get_data()
        food_name = data['food_name']
        
        user_id = str(message.from_user.id)
        result = await data_manager.log_food(user_id, food_name, amount)
        
        if "error" in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ:\n"
                f"üç¥ {result['food']}\n"
                f"‚öñÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {result['amount']} –≥\n"
                f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø–æ—Ä—Ü–∏–∏: {round(result['calories'])} –∫–∫–∞–ª\n"
                f"üìä –í—Å–µ–≥–æ –∫–∞–ª–æ—Ä–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {round(result['total_calories'])} –∫–∫–∞–ª"
            )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
