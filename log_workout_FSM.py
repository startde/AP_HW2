from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from create_profile_FSM import data_manager

router_workout = Router()

class WorkoutLog(StatesGroup):
    waiting_for_type = State()
    waiting_for_duration = State()

@router_workout.message(Command("log_workout"))
async def cmd_log_workout(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    user_id = str(message.from_user.id)
    if user_id not in data_manager.users:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return
        
    available_workouts = data_manager.get_available_workouts()
    await message.answer(
        "üèÉ‚Äç‚ôÇÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n" + 
        "\n".join([f"‚Ä¢ {w}" for w in available_workouts])
    )
    await state.set_state(WorkoutLog.waiting_for_type)

@router_workout.message(WorkoutLog.waiting_for_type)
async def process_workout_type(message: Message, state: FSMContext):
    workout_type = message.text.lower()
    
    if workout_type not in data_manager.get_available_workouts():
        available_workouts = data_manager.get_available_workouts()
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n" + 
            "\n".join([f"‚Ä¢ {w}" for w in available_workouts])
        )
        return
    
    await state.update_data(workout_type=workout_type)
    await message.answer("‚è± –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:")
    await state.set_state(WorkoutLog.waiting_for_duration)

@router_workout.message(WorkoutLog.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    try:
        duration = int(message.text)
        
        if duration <= 0:
            await message.answer("‚ùå –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return

        data = await state.get_data()
        workout_type = data['workout_type']
        user_id = str(message.from_user.id)
        
        result = data_manager.log_workout(user_id, workout_type, duration)
        
        if "error" in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            await message.answer(
                f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n"
                f"üèÉ‚Äç‚ôÇÔ∏è {result['workout_type'].capitalize()}: {result['duration']} –º–∏–Ω—É—Ç\n"
                f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {result['calories_burned']}\n"
                f"üíß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤—ã–ø–µ–π—Ç–µ {result['water_recommendation']} –º–ª –≤–æ–¥—ã\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å:\n"
                f"‚Ä¢ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {result['daily_stats']['calories_consumed']}\n"
                f"‚Ä¢ –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {result['daily_stats']['total_calories_burned']}\n"
                f"‚Ä¢ –ë–∞–ª–∞–Ω—Å –∫–∞–ª–æ—Ä–∏–π: {result['daily_stats']['calories_balance']}"
            )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()